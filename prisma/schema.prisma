// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Sección Person
model Person {
  id        Int           @id @default(autoincrement())
  name      String        @db.VarChar(45)
  surnames  String        @db.VarChar(75)
  phones    PersonPhone[]
  emails    PersonEmail[]
  companies Contact[]
}

model PersonPhone {
  personId Int
  person   Person @relation(fields: [personId], references: [id])

  phone String @db.VarChar(18)

  @@unique([personId, phone])
}

model PersonEmail {
  personId Int
  person   Person @relation(fields: [personId], references: [id])

  email String @db.VarChar(65)

  @@unique([personId, email])
}

// Sección User
model User {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique @db.VarChar(60)
  password String @db.VarChar(70)

  companies Company[]

  session UserSession?
}

model UserSession {
  userId Int  @id @unique
  user   User @relation(fields: [userId], references: [id])

  token   String
  expires DateTime
}

model Contact {
  personId Int
  person   Person @relation(fields: [personId], references: [id])

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  role String @db.VarChar(50)

  @@id([personId, companyId])
}

// Sección Company
model Company {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(80)
  NIF     String @db.VarChar(10)
  address String @db.VarChar(70)

  users User[]

  paymentPlans PaymentPlan[]
  taxes        Tax[]
  contacts     Contact[]
  provider     Provider?
  companies    Company[]     @relation(name: "ownership")
  ownerId      Int?
  owner        Company?      @relation(fields: [ownerId], references: [id], name: "ownership")

  dispatchNotes DispatchNote[]

  sellerInvoices Invoice[] @relation(name: "sellerCompany")
  buyerInvoices  Invoice[] @relation(name: "buyerCompany")

  buildings Building[]
}

// Sección PaymentPlan
model PaymentPlan {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(45)

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  payments  PaymentPlanPayment[]
  providers Provider[]
  invoices  Invoice[]
}

model PaymentPlanPayment {
  paymentPlanId Int
  paymentPlan   PaymentPlan @relation(fields: [paymentPlanId], references: [id])

  days Int

  percentage Int

  @@id([paymentPlanId, days])
}

// Sección Tax
model Tax {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(45)
  rate Int // percentage from 0 to 100

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  invoices Invoice[]
}

// Sección Provider
model Provider {
  companyId Int     @id
  company   Company @relation(fields: [companyId], references: [id])

  preferredPaymentPlanId Int?
  preferredPaymentPlan   PaymentPlan? @relation(references: [id], fields: [preferredPaymentPlanId])

  preferredGeneralDiscount Int? @default(0)

  brands Brand[]
}

// Sección Brand
model Brand {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(150)

  providerId Int
  provider   Provider  @relation(fields: [providerId], references: [companyId])
  products   Product[]
}

// Sección Product
model Product {
  code          String @unique @db.VarChar(40) // EAN
  internal_code String @db.VarChar(30)

  cost  Int?
  price Int

  brandId Int
  brand   Brand @relation(fields: [brandId], references: [id])

  storagedIn    ProductStock[]
  dispatchNotes ProductsDispatchNotes[]
  invoices      InvoiceProducts[]

  @@id([code, brandId])
}

// Sección Building
// Vamos a abstraer Store y Warehouse para simplificar el control del inventario
model Building {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(70)
  address String @db.VarChar(70)
  phone   String @db.VarChar(18)

  type BuildingType @default(STORE)

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  productStock ProductStock[]
}

enum BuildingType {
  WAREHOUSE
  STORE
}

model ProductStock {
  buildingId Int
  building   Building @relation(fields: [buildingId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [code])

  quantity Int @default(0)

  @@id([buildingId, productId])
}

// Sección DispatchNote
model DispatchNote {
  id         Int      @id @default(autoincrement())
  number     String   @db.VarChar(40)
  date       DateTime
  dispatched DateTime @default(now())

  companyId Int
  company   Company @relation(fields: [companyId], references: [id])

  products ProductsDispatchNotes[]
  Invoice  Invoice?
}

model ProductsDispatchNotes {
  productCode String
  product     Product @relation(fields: [productCode], references: [code])

  dispatchNoteId Int
  dispatchNote   DispatchNote @relation(fields: [dispatchNoteId], references: [id])

  quantity Int @default(0)

  @@id([productCode, dispatchNoteId])
}

// Sección Invoice
model Invoice {
  id Int @id @default(autoincrement())

  number    String   @db.VarChar(30)
  date      DateTime
  subtotal  Int
  discount  Int
  netAmount Int
  total     Int

  sellerId Int
  seller   Company @relation(fields: [sellerId], references: [id], name: "sellerCompany")

  buyerId Int
  buyer   Company @relation(fields: [buyerId], references: [id], name: "buyerCompany")

  paymentPlanId Int
  paymentPlan   PaymentPlan @relation(fields: [paymentPlanId], references: [id])

  dispatchNoteId Int?          @unique
  dispatchNote   DispatchNote? @relation(fields: [dispatchNoteId], references: [id])

  taxes    Tax[]
  dueDates DueDate[]
  products InvoiceProducts[]

  @@unique([number, sellerId])
}

model DueDate {
  invoiceId Int
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  date DateTime

  amount Int

  @@id([invoiceId, date])
}

model InvoiceProducts {
  invoiceId Int
  invoice   Invoice @relation(fields: [invoiceId], references: [id])

  productId String
  product   Product @relation(fields: [productId], references: [code])

  quantity Int @default(0)

  @@id([invoiceId, productId])
}
